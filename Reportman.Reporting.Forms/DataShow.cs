#region Copyright
/*
 *  Report Manager:  Database Reporting tool for .Net and Mono
 *
 *     The contents of this file are subject to the MPL License
 *     with optional use of GPL or LGPL licenses.
 *     You may not use this file except in compliance with the
 *     Licenses. You may obtain copies of the Licenses at:
 *     http://reportman.sourceforge.net/license
 *
 *     Software is distributed on an "AS IS" basis,
 *     WITHOUT WARRANTY OF ANY KIND, either
 *     express or implied.  See the License for the specific
 *     language governing rights and limitations.
 *
 *  Copyright (c) 1994 - 2008 Toni Martir (toni@reportman.es)
 *  All Rights Reserved.
*/
#endregion

using System;
using System.Drawing;
using System.Collections;
using System.Data;
using System.ComponentModel;
using System.Windows.Forms;
using Reportman.Drawing;
using Reportman.Reporting;

namespace Reportman.Reporting.Forms
{
	/// <summary>
	/// Datashow is the form where the sample data of a DataSet is shown
	/// </summary>
	public class DataShow : System.Windows.Forms.Form
	{
        private System.Windows.Forms.Panel panel1;
		private System.Windows.Forms.Panel panel2;
		private System.Windows.Forms.DataGrid dataGrid1;
        private Label label1;
		/// <summary>
		/// Required variable by designer
		/// </summary>
		private System.ComponentModel.Container components = null;
        /// <summary>
        /// Constructor
        /// </summary>
		public DataShow()
		{
			InitializeComponent();
            Width = Convert.ToInt32(800 * Reportman.Drawing.GraphicUtils.DPIScale);
            Height = Convert.ToInt32(600 * Reportman.Drawing.GraphicUtils.DPIScale);
        }

		/// <summary>
		/// Cleanup resources
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose(disposing);
		}

		#region Generated by Windows Forms designer
		/// <summary>
		/// Don't alter content with code editor
		/// </summary>
		private void InitializeComponent()
		{
            this.panel1 = new System.Windows.Forms.Panel();
            this.label1 = new System.Windows.Forms.Label();
            this.panel2 = new System.Windows.Forms.Panel();
            this.dataGrid1 = new System.Windows.Forms.DataGrid();
            this.panel1.SuspendLayout();
            this.panel2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dataGrid1)).BeginInit();
            this.SuspendLayout();
            // 
            // panel1
            // 
            this.panel1.Controls.Add(this.label1);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel1.Location = new System.Drawing.Point(0, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(605, 34);
            this.panel1.TabIndex = 3;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(12, 9);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(30, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Data";
            // 
            // panel2
            // 
            this.panel2.Controls.Add(this.dataGrid1);
            this.panel2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.panel2.Location = new System.Drawing.Point(0, 34);
            this.panel2.Name = "panel2";
            this.panel2.Size = new System.Drawing.Size(605, 442);
            this.panel2.TabIndex = 4;
            // 
            // dataGrid1
            // 
            this.dataGrid1.DataMember = "";
            this.dataGrid1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dataGrid1.HeaderForeColor = System.Drawing.SystemColors.ControlText;
            this.dataGrid1.Location = new System.Drawing.Point(0, 0);
            this.dataGrid1.Name = "dataGrid1";
            this.dataGrid1.ReadOnly = true;
            this.dataGrid1.Size = new System.Drawing.Size(605, 442);
            this.dataGrid1.TabIndex = 1;
            // 
            // DataShow
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(605, 476);
            this.Controls.Add(this.panel2);
            this.Controls.Add(this.panel1);
            this.Name = "DataShow";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Show Data";
            this.panel1.ResumeLayout(false);
            this.panel1.PerformLayout();
            this.panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dataGrid1)).EndInit();
            this.ResumeLayout(false);

		}
		#endregion

		private void BNext_Click(object sender, System.EventArgs e)
		{
			Data.Next();
            dataGrid1.Invalidate();
        }
		private ReportDataset Data;
        /// <summary>
        /// Show report dataset data
        /// </summary>
        /// <param name="areport">Report containing the dataset</param>
        /// <param name="datasetName">Dataset Name</param>
		public static void ShowData(Report areport, string datasetName,IWin32Window ParentForm)
		{
			int index;
			index = areport.DataInfo.IndexOf(datasetName);
			if (index < 0)
				throw new NamedException("Dataset not found:" + datasetName,datasetName);
			areport.DataInfo[index].Connect();
			DataShow dia = new DataShow();
			dia.Data = areport.DataInfo[index].Data;
			dia.dataGrid1.SetDataBinding(dia.Data, "");
			dia.ShowDialog(ParentForm);
		}
        /// <summary>
        /// Creates a DataGridTableStyle from a DataTable, sets default alignments and sizes to grid columns
        /// </summary>
        /// <param name="atable">DataTable</param>
        /// <param name="Parent">Parent control</param>
        /// <returns>Returns a DataGridTableStyle with a columns collection</returns>
        public static DataGridTableStyle CreateDataGridStyle(DataTable atable,Control Parent)
        {
            const decimal LOW_PERCENT = (decimal)0.90;
            const decimal HIGH_PERCENT = (decimal)1.10;
            DataGridTableStyle style = new DataGridTableStyle(false);
            byte r = Parent.BackColor.R;
            byte g = Parent.BackColor.G;
            byte b = Parent.BackColor.B;
            int sumrgb = (int)r + g + b;
            if (sumrgb > (128 * 3))
            {
                r = System.Convert.ToByte(r * LOW_PERCENT);
                g = System.Convert.ToByte(g * LOW_PERCENT);
                b = System.Convert.ToByte(b * LOW_PERCENT);
            }
            else
            {
                int r1 = System.Convert.ToInt32(r * HIGH_PERCENT);
                int g1 = System.Convert.ToInt32(g * HIGH_PERCENT);
                int b1 = System.Convert.ToInt32(b * HIGH_PERCENT);
                if (r1 <= 255)
                    r = System.Convert.ToByte(r1);
                else
                    r = 255;
                if (g1 <= 255)
                    g = System.Convert.ToByte(g1);
                else
                    g = 255;
                if (b1 <= 255)
                    b = System.Convert.ToByte(b1);
                else
                    b = 255;
            }
            style.AlternatingBackColor = Color.FromArgb(r, g, b);
            style.MappingName = atable.TableName;
            using (Graphics gr = Parent.CreateGraphics())
            {
                gr.PageUnit = GraphicsUnit.Pixel;
                foreach (DataColumn col in atable.Columns)
                {
                    if (col.Caption.Length > 0)
                    {
                        DataGridColumnStyle cs = new DataGridTextBoxColumn();
                        SizeF asize;
                        cs.HeaderText = col.Caption;
                        string typestring = col.DataType.ToString();
                        asize = gr.MeasureString(StringUtil.RepeatChar('C', 10), Parent.Font);
                        cs.Width = System.Convert.ToInt32(asize.Width);
                        switch (typestring)
                        {
                            case "System.String":
                                asize = gr.MeasureString(StringUtil.RepeatChar('C', col.MaxLength), Parent.Font);
                                cs.Width = System.Convert.ToInt32(asize.Width);
                                break;
                            case "System.Decimal":
                            case "System.Int32":
                            case "System.Double":
                                cs.Alignment = HorizontalAlignment.Right;
                                break;
                            case "System.DateTime":
                                break;
                            default:
                                break;

                        }
                        cs.MappingName = col.ColumnName;
                        style.GridColumnStyles.Add(cs);
                    }
                }
            }
            return style;
        }
        /// <summary>
        /// Creates a grid with default columns for the datatable
        /// </summary>
        public static DataGrid CreateGridColumns(DataTable atable, Control Parent)
        {
            DataGrid agrid = new DataGrid();            
            agrid.TableStyles.Add(CreateDataGridStyle(atable,Parent));
            return agrid;
        }

	}
}
